type Share @model @auth(rules: [{allow: public}]) {
  id: ID!
  to: String
  user: User @connection
  post: Post @connection
}

type Comment @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @connection
  post: Post @connection
  text: String
}

type Like @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @connection
  post: Post @connection
  value: Boolean
}

type Post @model @auth(rules: [{allow: public}]) {
  id: ID!
  text: String
  user: User @connection
  music: Music @connection
  attachments: AWSJSON
  likeCount: Int
  commentCount: Int
  shareCount: Int
}

type Music @model @auth(rules: [{allow: public}]) {
  id: ID!
  url: String
  img: String
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  nickname: String
  portrait: String
  bio: String
  birth: AWSDate
  gender: Int
  city: String
  profession: String
  username: String
}

enum ModelAttributeTypes {
	binary
	binarySet
	bool
	list
	map
	number
	numberSet
	string
	stringSet
	_null
}

input CreateLikeInput {
	id: ID
	value: Boolean
	_version: Int
	likeUserId: ID
	likePostId: ID
}

input ModelBooleanInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelLikeConditionInput {
	value: ModelBooleanInput
	and: [ModelLikeConditionInput]
	or: [ModelLikeConditionInput]
	not: ModelLikeConditionInput
}

type Mutation {
  createLikeDenormalized(input: CreateLikeInput!, condition: ModelLikeConditionInput): Like
    @aws_api_key
@aws_iam
}